/*
Ryan Earl
Final Project 
Creates a zombie text-based game in which you type to survive 
*/
int spawnTime;
final int WAIT_TIME = 2000;
final int BLOOD_TIME = 1000;
final int NUMBER_OF_PARTICLES = 20;
String word = "";
String saved = "";
//String typing = "";
float VELOCITY = 5;
PFont font;
import processing.sound.*;

SoundFile file;
String audio = "McZombie.mp3";
String audio1 = "Scream.mp3";
String path;
Survivor survivor;
Zombie zombie;

ArrayList<ParticleSystem> particleSystems;
ArrayList<ZombieSystem> zombieSystems;
ArrayList<Zombie> zombies;

//String[] names;
String[] words;

//Sorts the array of words
//String[] sorted = sort(words, words.length); 
//********SETUP****************************************************************************************************************************
void setup() {
  size(1920, 1000, FX2D);
  //spawnTime = millis() + WAIT_TIME;
  //words = loadStrings("Words.txt");
  zombies = new ArrayList<Zombie>();
  //names = loadStrings("Words.txt");  
  //println("There are " + words.length + " words.");
  //for (int i = 0; i <words.length; ++i) {
  //  zombies.add(new Zombie(words[i]));
  //}
  //print out each word in our words array

  zombieSystems = new ArrayList <ZombieSystem>();
  particleSystems = new ArrayList <ParticleSystem>();
  survivor = new Survivor();
  zombie = new Zombie();
  
  //draw title in center top of screen 
  //specify a font type and size and use that font for the title.
  
}
//**********DRAW**************************************************************************************************************************
void draw() {
  background(155);
  textAlign(CENTER);
  fill(0);
  boolean iMatched = zombie.isMatch(saved);
  println("I matched is " + iMatched);
  explosion();
  blood();
  //if (isTimerDone()) {
  //  zombie.display();
  //  zombie.move();
    
  //  spawnTime = millis() + WAIT_TIME;
  //}
  display();
  zombie.move();
  collision();
  
  //for (int i = zombieSystems.size()-1; i >= 0; --i) {
  //  ZombieSystem zs = zombieSystems.get(i); 
  //  if (zs.isDead()) {
  //    //particleSystems.add(
  //    //new ParticleSystem(NUMBER_OF_PARTICLES, mouseX, mouseY)
  //    //);
  //    zombieSystems.remove(zs);
  //  }
  //  if (!zs.isDead()) {
  //  zs.update();
  //  zs.display();
  //  }
    
  //}
  //text(word, width/2, height/2);
}
//********KEY INPUTS****************************************************************************************************************************
void keyPressed() {
  //Saved = Typing; 
  //test to see if the key is enter. If it is rememeber/save word into another string. Otherwise if not add to existing word 
  if(key == BACKSPACE && word.length ()>= 1){
      word = word.substring(0, word.length()-1) ;
      println(key);
    } 
 else if(key == ENTER) {
    // If the return key is pressed, save the String and clear it
    saved = word.toLowerCase(); 
    //saved = word; 
    println("the saved word is " + saved);
    //
    //A String can be cleared by setting it equal to ""
    word = "";
 }
  else word = word + key;
}

//boolean isTimerDone() {
// return (millis()>spawnTime); 
//}
//********ALL DISPLAY****************************************************************************************************************************
void display() {
  displayTitle();
  displayPrompt();
  drawCounter();
  zombie.draw();
  survivor.display();
}
//**************COLLISION AND DEATH**********************************************************************************************************************
void collision() {
  if (survivor.collision(zombie)== true) {
  println ("Dead");
  survivorDead();
  //endScreen();
  }
}

void survivorDead() {
  endScreen();
  path = sketchPath(audio1);
  file = new SoundFile(this, path); 
  file.play();
  //file.stop();
  VELOCITY = 0;  
}

void endScreen() {
  //frameRate(0);
  fill(255, 0 , 0);
  textSize(120);
  background (255);
  text("GAME OVER", width/2, height/2);
  drawCounter();
}
//**********DEATH+EXPLOSION**************************************************************************************************************************
void blood() {
  for (int i = particleSystems.size()-1; i >= 0; --i) {
    ParticleSystem ps = particleSystems.get(i); 
    if (ps.isFinished()) {
      particleSystems.remove(ps);
    }
    else if (!ps.isFinished()) {
    ps.update();
    ps.draw();
    ps.isFinished();
    }
  }
}
void explosion() {
  if (zombie.isMatch(saved) == true) {
  zombieDead();
  }
}

void zombieDead() {
  blood();
  particleSystems.add(
    new ParticleSystem(NUMBER_OF_PARTICLES, zombie.x+200, zombie.y+150)
  );
  VELOCITY = 0;
  path = sketchPath(audio);
  file = new SoundFile(this, path); 
  file.play();
}
//********SCORE****************************************************************************************************************************
void drawCounter() {
 fill(255, 0, 0);
 textSize(48);
 if (zombie.isMatch(saved) == true) {
   text("Score: " +1, width/2, height/6);
 }
   else  text("Score: " + 0, width/2, height/6);
 
}
//********DISPLAY****************************************************************************************************************************

void displayTitle() {
  font = loadFont("Chiller-Regular-120.vlw");
  textAlign(CENTER);
  textFont(font);
  fill(255, 0, 0);
  text("Type Zombies", width/2, height/10);
}
void displayPrompt() {
  font = loadFont("Chiller-Regular-48.vlw");
  textFont(font);
  text("Please type in a word: ", width/2, 300);
  text(word, width/2, height/2.5);
}
  //else if (zombie.offScreen()){
  //}
//************************************************************************************************************************************
